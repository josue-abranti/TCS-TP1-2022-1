        -:    0:Source:src/seed.c
        -:    0:Graph:tests.out-seed.gcno
        -:    0:Data:tests.out-seed.gcda
        -:    0:Runs:1
        -:    1:// FILE NAME  : seed.c
        -:    2:// AUTHOR     : Rafael Garibotti
        -:    3:// DEVELOPERS : Rafael Garibotti
        -:    4:// E-mail     : rafael.garibotti@pucrs.br
        -:    5://-----------------------------------------------------------------------------
        -:    6:// RELEASE HISTORY
        -:    7:// VERSION   DATE         DESCRIPTION
        -:    8:// 1.0       2022-04-11   Initial version.
        -:    9://-----------------------------------------------------------------------------
        -:   10:
        -:   11:#include "seed.h"
        -:   12:
        -:   13://-----------------------------------------------------------------------------
        -:   14:// SEED: 128-bits
        -:   15://-----------------------------------------------------------------------------
        -:   16:
        -:   17:// S-Box substitution layer
        -:   18:static uint32_t
function G called 0 returned 0% blocks executed 0%
    #####:   19:G(uint32_t x) {
    #####:   20:	return ss0[x & 0xFF] ^ ss1[(x >> 8) & 0xFF] ^ ss2[(x >> 16) & 0xFF] ^ ss3[(x >> 24) & 0xFF];
        -:   21:}
        -:   22:
        -:   23:// Diffusion layer
        -:   24:static void
function F called 0 returned 0% blocks executed 0%
    #####:   25:F(uint32_t R0, uint32_t R1, uint32_t Ki0, uint32_t Ki1, uint32_t* out0, uint32_t* out1) {
    #####:   26:	*out1 = (R0 ^ Ki0) ^ (R1 ^ Ki1);
    #####:   27:	*out1 = G(*out1);
call    0 never executed
    #####:   28:	*out0 = *out1 + (R0 ^ Ki0);
    #####:   29:	*out0 = G(*out0);
call    0 never executed
    #####:   30:	*out1 += *out0;
    #####:   31:	*out1 = G(*out1);
call    0 never executed
    #####:   32:	*out0 += *out1;
    #####:   33:}
        -:   34:
        -:   35:void
function seed_init called 0 returned 0% blocks executed 0%
    #####:   36:seed_init(SeedContext* context, uint32_t* key) {
    #####:   37:	const uint32_t keys[4] = { key[0], key[1], key[2], key[3] };
        -:   38:	uint32_t temp;
        -:   39:	int i;
        -:   40:
    #####:   41:	for (i = 0; i < 16; i++) {
branch  0 never executed
branch  1 never executed
        -:   42:		// generate subkeys as high and low nibbles, making it as 32 subkeys
    #####:   43:		context->subkeys[i * 2] = G(keys[0] + keys[2] - KC[i]);
call    0 never executed
    #####:   44:		context->subkeys[i * 2 + 1] = G(keys[1] - keys[3] + KC[i]);
call    0 never executed
        -:   45:
    #####:   46:		if (i % 2 != 0) {
branch  0 never executed
branch  1 never executed
        -:   47:			// odd rounds: Key0 || Key1 = (Key0 || Key1) >>> 8
    #####:   48:			temp = key[1] >> 8 | key[0] << 24;
    #####:   49:			key[0] = key[0] >> 8 | key[1] << 24;
    #####:   50:			key[1] = temp;
        -:   51:		}
        -:   52:		else {
        -:   53:			// even rounds: Key2 || Key3 = (Key2 || Key3) <<< 8
    #####:   54:			temp = key[3] >> 8 | key[2] << 24;
    #####:   55:			key[2] = key[2] >> 8 | key[3] << 24;
    #####:   56:			key[3] = temp;
        -:   57:		}
        -:   58:	}
    #####:   59:}
        -:   60:
        -:   61:void
function seed_enc called 0 returned 0% blocks executed 0%
    #####:   62:seed_enc(SeedContext* context, const uint32_t* block, uint32_t* out) {
        -:   63:	int i;
        -:   64:	uint32_t temp0;
        -:   65:	uint32_t temp1;
        -:   66:	// subkey is ascending in encryption
    #####:   67:	uint32_t subkey = 0;
        -:   68:	// left 64 bits of block divided into 2 32 bits parts
    #####:   69:	uint32_t l0 = block[0];
    #####:   70:	uint32_t l1 = block[1];
        -:   71:	// right 64 bits of block divided into 2 32 bits parts
    #####:   72:	uint32_t r0 = block[2];
    #####:   73:	uint32_t r1 = block[3];
        -:   74:
    #####:   75:	for (i = 0; i < NR_ROUNDS - 1; i++) {
branch  0 never executed
branch  1 never executed
    #####:   76:		F(r0, r1, context->subkeys[subkey], context->subkeys[subkey + 1], &temp0, &temp1);
call    0 never executed
        -:   77:
    #####:   78:		temp0 ^= l0;
    #####:   79:		temp1 ^= l1;
        -:   80:
    #####:   81:		l0 = r0;
    #####:   82:		l1 = r1;
        -:   83:
    #####:   84:		r0 = temp0;
    #####:   85:		r1 = temp1;
        -:   86:
    #####:   87:		subkey += 2;
        -:   88:	}
        -:   89:
        -:   90:	// last round we update l instead of r
    #####:   91:	F(r0, r1, context->subkeys[subkey], context->subkeys[subkey + 1], &temp0, &temp1);
call    0 never executed
        -:   92:
    #####:   93:	l0 ^= temp0;
    #####:   94:	l1 ^= temp1;
        -:   95:
    #####:   96:	out[0] = l0;
    #####:   97:	out[1] = l1;
    #####:   98:	out[2] = r0;
    #####:   99:	out[3] = r1;
    #####:  100:}
        -:  101:
        -:  102:void
function seed_dec called 0 returned 0% blocks executed 0%
    #####:  103:seed_dec(SeedContext* context, const uint32_t* block, uint32_t* out) {
        -:  104:	int i;
        -:  105:	uint32_t temp0;
        -:  106:	uint32_t temp1;
        -:  107:	// subkey is descending in decryption
    #####:  108:	uint32_t subkey = 31;
        -:  109:	// left 64 bits of block divided into 2 32 bits parts
    #####:  110:	uint32_t l0 = block[0];
    #####:  111:	uint32_t l1 = block[1];
        -:  112:	// right 64 bits of block divided into 2 32 bits parts
    #####:  113:	uint32_t r0 = block[2];
    #####:  114:	uint32_t r1 = block[3];
        -:  115:
    #####:  116:	for (i = 0; i < NR_ROUNDS - 1; i++) {
branch  0 never executed
branch  1 never executed
    #####:  117:		F(r0, r1, context->subkeys[subkey - 1], context->subkeys[subkey], &temp0, &temp1);
call    0 never executed
        -:  118:
    #####:  119:		temp0 ^= l0;
    #####:  120:		temp1 ^= l1;
        -:  121:
    #####:  122:		l0 = r0;
    #####:  123:		l1 = r1;
        -:  124:
    #####:  125:		r0 = temp0;
    #####:  126:		r1 = temp1;
        -:  127:
    #####:  128:		subkey -= 2;
        -:  129:	}
        -:  130:
        -:  131:	// last round we update l instead of r
    #####:  132:	F(r0, r1, context->subkeys[subkey - 1], context->subkeys[subkey], &temp0, &temp1);
call    0 never executed
        -:  133:
    #####:  134:	l0 ^= temp0;
    #####:  135:	l1 ^= temp1;
        -:  136:
    #####:  137:	out[0] = l0;
    #####:  138:	out[1] = l1;
    #####:  139:	out[2] = r0;
    #####:  140:	out[3] = r1;
    #####:  141:}
        -:  142:
        -:  143:void
function seed called 0 returned 0% blocks executed 0%
    #####:  144:seed(uint32_t* key, uint32_t* input, uint8_t enc_dec, uint32_t *output) {
        -:  145:  SeedContext context;
        -:  146:  
    #####:  147:  seed_init(&context, key);
call    0 never executed
    #####:  148:  if (enc_dec)
branch  0 never executed
branch  1 never executed
    #####:  149:    seed_enc(&context, input, output);
call    0 never executed
        -:  150:  else
    #####:  151:    seed_dec(&context, input, output);
call    0 never executed
    #####:  152:}
